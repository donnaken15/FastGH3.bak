; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Windows\fastgh3\PLUGINS\CODE\gh3\QbArray.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?function@?1??Initialize@QbArray@GH3@@QAEPAHHH@Z@4PBXB DD 055df00H ; `GH3::QbArray::Initialize'::`2'::function
_DATA	ENDS
PUBLIC	?Initialize@QbArray@GH3@@QAEPAHHH@Z		; GH3::QbArray::Initialize
PUBLIC	?Clear@QbArray@GH3@@QAEXXZ			; GH3::QbArray::Clear
PUBLIC	??AQbArray@GH3@@QBEIH@Z				; GH3::QbArray::operator[]
PUBLIC	??AQbArray@GH3@@QAEAAIH@Z			; GH3::QbArray::operator[]
PUBLIC	?Set@QbArray@GH3@@QAEXHI@Z			; GH3::QbArray::Set
PUBLIC	?Get@QbArray@GH3@@QBEIH@Z			; GH3::QbArray::Get
PUBLIC	?SetType@QbArray@GH3@@QAEXW4QbValueType@2@@Z	; GH3::QbArray::SetType
PUBLIC	?Type@QbArray@GH3@@QBE?AW4QbValueType@2@XZ	; GH3::QbArray::Type
PUBLIC	?Length@QbArray@GH3@@QBEIXZ			; GH3::QbArray::Length
PUBLIC	??4QbArray@GH3@@QAEAAU01@ABU01@@Z		; GH3::QbArray::operator=
PUBLIC	??4QbArray@GH3@@QAEAAU01@$$QAU01@@Z		; GH3::QbArray::operator=
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4QbArray@GH3@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4QbArray@GH3@@QAEAAU01@$$QAU01@@Z PROC		; GH3::QbArray::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+3], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4QbArray@GH3@@QAEAAU01@$$QAU01@@Z ENDP		; GH3::QbArray::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4QbArray@GH3@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4QbArray@GH3@@QAEAAU01@ABU01@@Z PROC			; GH3::QbArray::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4QbArray@GH3@@QAEAAU01@ABU01@@Z ENDP			; GH3::QbArray::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.h
;	COMDAT ?Length@QbArray@GH3@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Length@QbArray@GH3@@QBEIXZ PROC			; GH3::QbArray::Length, COMDAT
; _this$ = ecx

; 35   : 		inline uint32_t Length() const { return m_length;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@QbArray@GH3@@QBEIXZ ENDP			; GH3::QbArray::Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.h
;	COMDAT ?Type@QbArray@GH3@@QBE?AW4QbValueType@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Type@QbArray@GH3@@QBE?AW4QbValueType@2@XZ PROC		; GH3::QbArray::Type, COMDAT
; _this$ = ecx

; 34   : 		inline QbValueType Type() const { return m_type;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+2]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@QbArray@GH3@@QBE?AW4QbValueType@2@XZ ENDP		; GH3::QbArray::Type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.h
;	COMDAT ?SetType@QbArray@GH3@@QAEXW4QbValueType@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_type$ = 8						; size = 1
?SetType@QbArray@GH3@@QAEXW4QbValueType@2@@Z PROC	; GH3::QbArray::SetType, COMDAT
; _this$ = ecx

; 33   : 		inline void SetType(QbValueType type) { m_type = type; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _type$[ebp]
	mov	BYTE PTR [eax+2], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@QbArray@GH3@@QAEXW4QbValueType@2@@Z ENDP	; GH3::QbArray::SetType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.h
;	COMDAT ?Get@QbArray@GH3@@QBEIH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?Get@QbArray@GH3@@QBEIH@Z PROC				; GH3::QbArray::Get, COMDAT
; _this$ = ecx

; 31   : 		inline uint32_t Get(int index) const { return (*this)[index]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AQbArray@GH3@@QBEIH@Z			; GH3::QbArray::operator[]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Get@QbArray@GH3@@QBEIH@Z ENDP				; GH3::QbArray::Get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.h
;	COMDAT ?Set@QbArray@GH3@@QAEXHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?Set@QbArray@GH3@@QAEXHI@Z PROC				; GH3::QbArray::Set, COMDAT
; _this$ = ecx

; 30   : 		inline void Set(int index, uint32_t value) { (*this)[index] = value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AQbArray@GH3@@QAEAAIH@Z		; GH3::QbArray::operator[]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@QbArray@GH3@@QAEXHI@Z ENDP				; GH3::QbArray::Set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.cpp
;	COMDAT ??AQbArray@GH3@@QAEAAIH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??AQbArray@GH3@@QAEAAIH@Z PROC				; GH3::QbArray::operator[], COMDAT
; _this$ = ecx

; 29   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 		if (Length() == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Length@QbArray@GH3@@QBEIXZ		; GH3::QbArray::Length
	cmp	eax, 1
	jne	SHORT $LN2@operator

; 31   : 			return reinterpret_cast<uint32_t &>(m_arr);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	jmp	SHORT $LN1@operator

; 32   : 		else

	jmp	SHORT $LN1@operator
$LN2@operator:

; 33   : 			return m_arr[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
$LN1@operator:

; 34   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??AQbArray@GH3@@QAEAAIH@Z ENDP				; GH3::QbArray::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.cpp
;	COMDAT ??AQbArray@GH3@@QBEIH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??AQbArray@GH3@@QBEIH@Z PROC				; GH3::QbArray::operator[], COMDAT
; _this$ = ecx

; 21   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 22   : 		if (m_length != 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN2@operator

; 23   : 			return m_arr[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN1@operator

; 24   : 		else

	jmp	SHORT $LN1@operator
$LN2@operator:

; 25   : 			return reinterpret_cast<uint32_t>(m_arr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
$LN1@operator:

; 26   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AQbArray@GH3@@QBEIH@Z ENDP				; GH3::QbArray::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.cpp
;	COMDAT ?Clear@QbArray@GH3@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Clear@QbArray@GH3@@QAEXXZ PROC				; GH3::QbArray::Clear, COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 14   : 		SetType(QbValueType::TypeUndefined);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetType@QbArray@GH3@@QAEXW4QbValueType@2@@Z ; GH3::QbArray::SetType

; 15   : 		m_arr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 16   : 		m_length = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 17   : 		unk1 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0

; 18   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@QbArray@GH3@@QAEXXZ ENDP				; GH3::QbArray::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbarray.cpp
;	COMDAT ?Initialize@QbArray@GH3@@QAEPAHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = 8						; size = 4
_type$ = 12						; size = 4
?Initialize@QbArray@GH3@@QAEPAHHH@Z PROC		; GH3::QbArray::Initialize, COMDAT
; _this$ = ecx

; 7    : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 8    : 		static const void *function = (void *)0x0055DF00;
; 9    : 		__asm jmp function;

	jmp	DWORD PTR ?function@?1??Initialize@QbArray@GH3@@QAEPAHHH@Z@4PBXB

; 10   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Initialize@QbArray@GH3@@QAEPAHHH@Z ENDP		; GH3::QbArray::Initialize
_TEXT	ENDS
END
