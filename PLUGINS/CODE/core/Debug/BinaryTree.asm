; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Windows\fastgh3\PLUGINS\CODE\gh3\BinaryTree.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?tab@crc32@GH3@@3QBIB DD 00H				; GH3::crc32::tab
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
CONST	ENDS
PUBLIC	?fixChar@crc32@GH3@@YADD@Z			; GH3::crc32::fixChar
PUBLIC	?hashChar@crc32@GH3@@YAIDI@Z			; GH3::crc32::hashChar
PUBLIC	?hash@crc32@GH3@@YAIPBDI@Z			; GH3::crc32::hash
PUBLIC	??0QbKey@GH3@@QAE@XZ				; GH3::QbKey::QbKey
PUBLIC	??0QbKey@GH3@@QAE@ABU01@@Z			; GH3::QbKey::QbKey
PUBLIC	??0QbKey@GH3@@QAE@I@Z				; GH3::QbKey::QbKey
PUBLIC	??0QbKey@GH3@@QAE@PBD@Z				; GH3::QbKey::QbKey
PUBLIC	??BQbKey@GH3@@QBEIXZ				; GH3::QbKey::operator unsigned int
PUBLIC	??4QbKey@GH3@@QAEAAU01@I@Z			; GH3::QbKey::operator=
PUBLIC	??4QbKey@GH3@@QAEAAU01@ABU01@@Z			; GH3::QbKey::operator=
PUBLIC	?GetTypedValue@BinaryTree@GH3@@QAE_NUQbKey@2@W4QbValueType@2@PAX@Z ; GH3::BinaryTree::GetTypedValue
PUBLIC	??4BinaryTree@GH3@@QAEAAU01@ABU01@@Z		; GH3::BinaryTree::operator=
PUBLIC	??4BinaryTree@GH3@@QAEAAU01@$$QAU01@@Z		; GH3::BinaryTree::operator=
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4BinaryTree@GH3@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
_$S1$1 = -20						; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4BinaryTree@GH3@@QAEAAU01@$$QAU01@@Z PROC		; GH3::BinaryTree::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+3], dl
	mov	DWORD PTR _$S1$1[ebp], 0
	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR _$S1$1[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$1[ebp], eax
$LN4@operator:
	cmp	DWORD PTR _$S1$1[ebp], 1
	jae	SHORT $LN3@operator
	mov	eax, DWORD PTR _$S1$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _$S1$1[ebp]
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+4]
	mov	DWORD PTR [ecx+eax*4+4], edx
	jmp	SHORT $LN2@operator
$LN3@operator:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4BinaryTree@GH3@@QAEAAU01@$$QAU01@@Z ENDP		; GH3::BinaryTree::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4BinaryTree@GH3@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4BinaryTree@GH3@@QAEAAU01@ABU01@@Z PROC		; GH3::BinaryTree::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4BinaryTree@GH3@@QAEAAU01@ABU01@@Z ENDP		; GH3::BinaryTree::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\binarytree.cpp
;	COMDAT ?GetTypedValue@BinaryTree@GH3@@QAE_NUQbKey@2@W4QbValueType@2@PAX@Z
_TEXT	SEGMENT
tv179 = -336						; size = 8
tv175 = -328						; size = 4
_tmp$ = -116						; size = 4
_fValue$ = -104						; size = 4
_iValue$ = -92						; size = 4
_leftNode$ = -80					; size = 4
_middle$ = -68						; size = 4
_right$ = -56						; size = 4
_left$ = -44						; size = 4
_data$ = -32						; size = 4
_searchValue$ = -20					; size = 4
_this$ = -8						; size = 4
_aKey$ = 8						; size = 4
_valueType$ = 12					; size = 1
_pValue$ = 16						; size = 4
?GetTypedValue@BinaryTree@GH3@@QAE_NUQbKey@2@W4QbValueType@2@PAX@Z PROC ; GH3::BinaryTree::GetTypedValue, COMDAT
; _this$ = ecx

; 8    : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 9    : 		uint32_t searchValue; // ebx@2
; 10   : 		uint32_t *data; // ebp@2
; 11   : 		uint32_t left; // esi@2
; 12   : 		uint32_t right; // edi@2
; 13   : 		uint32_t middle; // eax@3
; 14   : 		uint32_t leftNode; // edx@3
; 15   : 
; 16   : 		uint32_t * const iValue = static_cast<uint32_t *>(pValue);

	mov	eax, DWORD PTR _pValue$[ebp]
	mov	DWORD PTR _iValue$[ebp], eax

; 17   : 		float * const fValue = static_cast<float *>(pValue);

	mov	eax, DWORD PTR _pValue$[ebp]
	mov	DWORD PTR _fValue$[ebp], eax

; 18   : 
; 19   : 		if (this->root)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	$LN7@GetTypedVa

; 20   : 		{
; 21   : 			searchValue = aKey + valueType;

	lea	ecx, DWORD PTR _aKey$[ebp]
	call	??BQbKey@GH3@@QBEIXZ			; GH3::QbKey::operator unsigned int
	movsx	ecx, BYTE PTR _valueType$[ebp]
	add	eax, ecx
	mov	DWORD PTR _searchValue$[ebp], eax

; 22   : 			data = &this->data[this->arrayOffset];

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _data$[ebp], eax

; 23   : 			left = 0;

	mov	DWORD PTR _left$[ebp], 0

; 24   : 			for (right = this->root; ; left = (right + left) >> 1)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _right$[ebp], ecx
	jmp	SHORT $LN4@GetTypedVa
$LN2@GetTypedVa:
	mov	eax, DWORD PTR _right$[ebp]
	add	eax, DWORD PTR _left$[ebp]
	shr	eax, 1
	mov	DWORD PTR _left$[ebp], eax
$LN4@GetTypedVa:

; 25   : 			{
; 26   : 				while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@GetTypedVa

; 27   : 				{
; 28   : 					middle = (right + left) >> 1;           

	mov	eax, DWORD PTR _right$[ebp]
	add	eax, DWORD PTR _left$[ebp]
	shr	eax, 1
	mov	DWORD PTR _middle$[ebp], eax

; 29   : 															
; 30   : 					leftNode = data[2 * middle];            

	mov	eax, DWORD PTR _middle$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _leftNode$[ebp], edx

; 31   : 					if (searchValue >= leftNode)

	mov	eax, DWORD PTR _searchValue$[ebp]
	cmp	eax, DWORD PTR _leftNode$[ebp]
	jb	SHORT $LN8@GetTypedVa

; 32   : 						break;                              

	jmp	SHORT $LN6@GetTypedVa
$LN8@GetTypedVa:

; 33   : 															
; 34   : 					if (right == middle)

	mov	eax, DWORD PTR _right$[ebp]
	cmp	eax, DWORD PTR _middle$[ebp]
	jne	SHORT $LN9@GetTypedVa

; 35   : 						goto MAYBE_FLOAT;

	jmp	SHORT $LN10@GetTypedVa
	jmp	SHORT $MAYBE_FLOAT$19
$LN9@GetTypedVa:

; 36   : 					right = (right + left) >> 1;

	mov	eax, DWORD PTR _right$[ebp]
	add	eax, DWORD PTR _left$[ebp]
	shr	eax, 1
	mov	DWORD PTR _right$[ebp], eax

; 37   : 				}

	jmp	SHORT $LN4@GetTypedVa
$LN6@GetTypedVa:

; 38   : 
; 39   : 				if (searchValue <= leftNode)

	mov	eax, DWORD PTR _searchValue$[ebp]
	cmp	eax, DWORD PTR _leftNode$[ebp]
	ja	SHORT $LN11@GetTypedVa

; 40   : 					break;

	jmp	SHORT $LN3@GetTypedVa
$LN11@GetTypedVa:

; 41   : 
; 42   : 				if (left == middle)

	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _middle$[ebp]
	jne	SHORT $LN12@GetTypedVa

; 43   : 					goto MAYBE_FLOAT;

	jmp	SHORT $LN13@GetTypedVa
	jmp	SHORT $MAYBE_FLOAT$19
$LN12@GetTypedVa:

; 44   : 			}

	jmp	SHORT $LN2@GetTypedVa
$LN3@GetTypedVa:

; 45   : 			*iValue = data[2 * middle + 1];        

	mov	eax, DWORD PTR _middle$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+4]
	mov	DWORD PTR [ecx], eax

; 46   : 			return true;

	mov	al, 1
	jmp	SHORT $LN1@GetTypedVa
$LN7@GetTypedVa:
$LN10@GetTypedVa:
$LN13@GetTypedVa:
$MAYBE_FLOAT$19:

; 47   : 		}
; 48   : 
; 49   : 		MAYBE_FLOAT:
; 50   : 		uint32_t tmp;
; 51   : 		if (valueType == TypeFloat && GetTypedValue(aKey, QbValueType::TypeInt, &tmp))

	movsx	eax, BYTE PTR _valueType$[ebp]
	cmp	eax, 2
	jne	SHORT $LN14@GetTypedVa
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	push	1
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR _aKey$[ebp]
	push	edx
	call	??0QbKey@GH3@@QAE@ABU01@@Z		; GH3::QbKey::QbKey
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTypedValue@BinaryTree@GH3@@QAE_NUQbKey@2@W4QbValueType@2@PAX@Z ; GH3::BinaryTree::GetTypedValue
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@GetTypedVa

; 52   : 		{
; 53   : 			*fValue = (float)tmp;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR tv175[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv175[ebp]
	mov	ecx, DWORD PTR tv175[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv179[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv179[ebp]
	mov	edx, DWORD PTR _fValue$[ebp]
	movss	DWORD PTR [edx], xmm0

; 54   : 			return true;

	mov	al, 1
	jmp	SHORT $LN1@GetTypedVa
$LN14@GetTypedVa:

; 55   : 		}
; 56   : 			
; 57   : 		return false;

	xor	al, al
$LN1@GetTypedVa:

; 58   : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@GetTypedVa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN18@GetTypedVa:
	DD	1
	DD	$LN17@GetTypedVa
$LN17@GetTypedVa:
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN16@GetTypedVa
$LN16@GetTypedVa:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?GetTypedValue@BinaryTree@GH3@@QAE_NUQbKey@2@W4QbValueType@2@PAX@Z ENDP ; GH3::BinaryTree::GetTypedValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4QbKey@GH3@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4QbKey@GH3@@QAEAAU01@ABU01@@Z PROC			; GH3::QbKey::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4QbKey@GH3@@QAEAAU01@ABU01@@Z ENDP			; GH3::QbKey::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ??4QbKey@GH3@@QAEAAU01@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??4QbKey@GH3@@QAEAAU01@I@Z PROC				; GH3::QbKey::operator=, COMDAT
; _this$ = ecx

; 111  : 		inline QbKey& operator=(const uint32_t rhs) { m_key = rhs; return *this; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4QbKey@GH3@@QAEAAU01@I@Z ENDP				; GH3::QbKey::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ??BQbKey@GH3@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??BQbKey@GH3@@QBEIXZ PROC				; GH3::QbKey::operator unsigned int, COMDAT
; _this$ = ecx

; 108  : 		inline constexpr operator uint32_t() const { return m_key; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BQbKey@GH3@@QBEIXZ ENDP				; GH3::QbKey::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ??0QbKey@GH3@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_key$ = 8						; size = 4
??0QbKey@GH3@@QAE@PBD@Z PROC				; GH3::QbKey::QbKey, COMDAT
; _this$ = ecx

; 105  : 		constexpr QbKey(const char *key) : m_key(crc32::hash(key)) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	-1
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	?hash@crc32@GH3@@YAIPBDI@Z		; GH3::crc32::hash
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0QbKey@GH3@@QAE@PBD@Z ENDP				; GH3::QbKey::QbKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ??0QbKey@GH3@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_key$ = 8						; size = 4
??0QbKey@GH3@@QAE@I@Z PROC				; GH3::QbKey::QbKey, COMDAT
; _this$ = ecx

; 102  : 		constexpr QbKey(const uint32_t key) : m_key(key) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0QbKey@GH3@@QAE@I@Z ENDP				; GH3::QbKey::QbKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ??0QbKey@GH3@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??0QbKey@GH3@@QAE@ABU01@@Z PROC				; GH3::QbKey::QbKey, COMDAT
; _this$ = ecx

; 99   : 		constexpr QbKey(const QbKey &rhs) : m_key(rhs.m_key) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0QbKey@GH3@@QAE@ABU01@@Z ENDP				; GH3::QbKey::QbKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ??0QbKey@GH3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0QbKey@GH3@@QAE@XZ PROC				; GH3::QbKey::QbKey, COMDAT
; _this$ = ecx

; 97   : 		constexpr QbKey() : m_key(0) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0QbKey@GH3@@QAE@XZ ENDP				; GH3::QbKey::QbKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ?hash@crc32@GH3@@YAIPBDI@Z
_TEXT	SEGMENT
tv74 = -200						; size = 4
tv75 = -196						; size = 4
_key$ = 8						; size = 4
_previousKey$ = 12					; size = 4
?hash@crc32@GH3@@YAIPBDI@Z PROC				; GH3::crc32::hash, COMDAT

; 76   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 77   : 			return	(!key) ? 0 :

	cmp	DWORD PTR _key$[ebp], 0
	jne	SHORT $LN5@hash
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN6@hash
$LN5@hash:
	mov	eax, DWORD PTR _key$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@hash
	mov	edx, DWORD PTR _previousKey$[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@hash
$LN3@hash:
	mov	eax, DWORD PTR _previousKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	?hashChar@crc32@GH3@@YAIDI@Z		; GH3::crc32::hashChar
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 1
	push	eax
	call	?hash@crc32@GH3@@YAIPBDI@Z		; GH3::crc32::hash
	add	esp, 8
	mov	DWORD PTR tv74[ebp], eax
$LN4@hash:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv75[ebp], ecx
$LN6@hash:
	mov	eax, DWORD PTR tv75[ebp]

; 78   : 					(*key == '\0') ? previousKey :
; 79   : 					(hash(key + 1, hashChar(*key, previousKey)));
; 80   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?hash@crc32@GH3@@YAIPBDI@Z ENDP				; GH3::crc32::hash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ?hashChar@crc32@GH3@@YAIDI@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
_crc$ = 12						; size = 4
?hashChar@crc32@GH3@@YAIDI@Z PROC			; GH3::crc32::hashChar, COMDAT

; 71   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 72   : 			return tab[(crc ^ fixChar(c)) & 0xFF] ^ (crc >> 8);

	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	?fixChar@crc32@GH3@@YADD@Z		; GH3::crc32::fixChar
	add	esp, 4
	movsx	ecx, al
	xor	ecx, DWORD PTR _crc$[ebp]
	and	ecx, 255				; 000000ffH
	mov	eax, DWORD PTR _crc$[ebp]
	shr	eax, 8
	xor	eax, DWORD PTR ?tab@crc32@GH3@@3QBIB[ecx*4]

; 73   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?hashChar@crc32@GH3@@YAIDI@Z ENDP			; GH3::crc32::hashChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\windows\fastgh3\plugins\code\gh3\qbkey.h
;	COMDAT ?fixChar@crc32@GH3@@YADD@Z
_TEXT	SEGMENT
tv72 = -197						; size = 1
tv74 = -196						; size = 4
_c$ = 8							; size = 1
?fixChar@crc32@GH3@@YADD@Z PROC				; GH3::crc32::fixChar, COMDAT

; 64   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 			return	(c >= 'A' && c <= 'Z') ? (c + 32) :

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN3@fixChar
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN3@fixChar
	movsx	edx, BYTE PTR _c$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN6@fixChar
$LN3@fixChar:
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN4@fixChar
	mov	BYTE PTR tv72[ebp], 92			; 0000005cH
	jmp	SHORT $LN5@fixChar
$LN4@fixChar:
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR tv72[ebp], cl
$LN5@fixChar:
	movsx	edx, BYTE PTR tv72[ebp]
	mov	DWORD PTR tv74[ebp], edx
$LN6@fixChar:
	mov	al, BYTE PTR tv74[ebp]

; 66   : 				(c == '/') ? '\\' :
; 67   : 				c;
; 68   : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?fixChar@crc32@GH3@@YADD@Z ENDP				; GH3::crc32::fixChar
_TEXT	ENDS
END
